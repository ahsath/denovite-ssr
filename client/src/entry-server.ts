import { createSSRApp } from "vue";
import { renderToString, type SSRContext } from "@vue/server-renderer";
import { componentsMap } from "./main.ts";

interface Props {
  [key: string]: unknown;
}

interface SSRCtx {
  teleports?: SSRContext["teleports"];
  modules: Set<string>;
}

interface RenderOptions {
  componentName: string;
  props?: Props;
  isClientOnly?: boolean;
  ctx?: SSRCtx;
  ssrManifest: Record<string, string[]>;
}

interface RenderResult {
  html: string;
  ctx: SSRCtx;
  preloadLinks: string;
}

// Function to render a specific component to an HTML string
export async function render(options: RenderOptions): Promise<RenderResult> {
  const {
    componentName,
    props = {},
    isClientOnly = Deno.env.get("NODE_ENV") === "development",
  } = options;
  if (!componentsMap[componentName]) {
    throw new Error(
      `[SSR] Component "${componentName}" not found in componentsMap.`
    );
  }

  let Component = await componentsMap[componentName]();
  Component = Component.default || Component;

  if (!Component) {
    throw new Error(`[SSR] Component "${componentName}" could not be loaded.`);
  }

  const propsJsonString = JSON.stringify(props);

  if (isClientOnly) {
    return {
      html: `<div data-component="${componentName}" data-props='${propsJsonString}' data-client-only="true"></div>`,
      ctx: { modules: new Set() },
      preloadLinks: "",
    };
  }

  try {
    const ctx: SSRCtx = { modules: new Set() };
    const app = createSSRApp(Component, props);
    const innerHtml = await renderToString(app, ctx);

    // the SSR manifest generated by Vite contains module -> chunk/asset mapping
    // which we can then use to determine what files need to be preloaded for this
    // request.
    const preloadLinks = renderPreloadLinks(ctx.modules, options.ssrManifest);

    // Return the full div structure that the client hydrator will find
    // Ensure the data attributes match what your client hydrator looks for
    return {
      html: `<div data-component="${componentName}" data-props='${propsJsonString}'>${innerHtml}</div>`,
      ctx,
      preloadLinks,
    };
  } catch (error) {
    throw new Error(`[SSR] Error rendering "${componentName}": ${error}`);
  }
}

function renderPreloadLinks(
  modules: SSRCtx["modules"],
  manifest: Record<string, string[]>
) {
  let links = "";
  const seen = new Set();
  modules.forEach((id) => {
    const files = manifest[id];
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file);
          // const filename = basename(file);
          // if (manifest[filename]) {
          //   for (const depFile of manifest[filename]) {
          //     links += renderPreloadLink(depFile);
          //     seen.add(depFile);
          //   }
          // }
          links += renderPreloadLink(file);
        }
      });
    }
  });
  return links;
}

function renderPreloadLink(file: string) {
  if (file.endsWith(".js")) {
    return `<link rel="modulepreload" crossorigin href="${file}">`;
  } else if (file.endsWith(".css")) {
    return `<link rel="stylesheet" href="${file}">`;
  } else if (file.endsWith(".woff")) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
  } else if (file.endsWith(".woff2")) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
  } else if (file.endsWith(".gif")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`;
  } else if (file.endsWith(".jpg") || file.endsWith(".jpeg")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`;
  } else if (file.endsWith(".png")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`;
  } else {
    // TODO
    return "";
  }
}

export type Render = typeof render;
